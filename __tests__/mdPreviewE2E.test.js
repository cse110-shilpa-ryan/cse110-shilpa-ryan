const puppeteer = require('puppeteer');

const exampleHTML = '<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<p><code>System.out.println("Hello World!");</code></p>\n<ul>\n<li>Bullet point 1<br><a href="https://www.google.com">Link to google</a></li>\n</ul>\n';
const exampleText = '# Heading 1\n## Heading 2\n`System.out.println("Hello World!");`\n- Bullet point 1\n[Link to google](https://www.google.com)';
const lineNumbers = 5;

describe('Basic testing of Markdown previewer', () => {
    let browser;
    let page;

    beforeAll(async () => {
        browser = await puppeteer.launch(); // Set to false if you want to see the browser actions
        page = await browser.newPage();
        await page.goto('https://cse110-sp24-group11.github.io/cse110-sp24-group11/assets/src/md-previewer/index.html');
        await page.setViewport({ width: 720, height: 1280 });
    }, 20000);

    afterAll(async () => {
        if (browser) {
            await browser.close();
        }
    }, 20000);

    test('Add text in text area and confirm', async () => {
        await page.click('textarea');
        await page.type('textarea', exampleText);
        const resultText = await page.$eval('textarea', textArea => {
            return textArea.value;
        });
        expect(resultText).toBe(exampleText);
    }, 20000);

    test('Confirm correct HTML generated by marked', async () => {
        const resultHTML = await page.$eval('#md-parser', element => {
            return element.innerHTML;
        });
        expect(resultHTML).toBe(exampleHTML);
    }, 20000);

    test('Confirm it saves text after reload', async () => {
        await page.reload();
        const savedText = await page.evaluate(() => {
            return localStorage.getItem('content');
        });
        expect(savedText).toBe(exampleText);
    }, 20000);

    test('Confirm number of line numbers', async () => {
        const resultLineNumbers = await page.$eval('.gutter', gutter => {
            return gutter.childElementCount;
        });
        expect(resultLineNumbers).toBe(lineNumbers);
    }, 20000);

    test('Confirm it deletes notes', async () => {
        await page.click('textarea');
        await page.keyboard.down('Control');
        await page.keyboard.press('A');
        await page.keyboard.up('Control');
        await page.keyboard.press('Backspace');
        const resultText = await page.$eval('textarea', textArea => {
            return textArea.value;
        }, 2000);
        expect(resultText).toBe('');
    }, 20000);
});